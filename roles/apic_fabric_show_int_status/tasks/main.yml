---

- assert:
    that:
      - FABRICS is defined
      - "{{ FABRICS | length  > 0 }}"
    fail_msg: "FABRICS is not defined"
    success_msg: "target fabric is {{ FABRICS }}"


- name: Create log directory if not exists
  local_action:
    module: file
    path: "{{ LOG_DIR }}"
    state: directory
    recurse: true
  changed_when: false
  run_once: true


-
  block:

    - name: fabric show interface status
      cli_command:
        command: "fabric {{ item }} show interface status"
      register: cli_result
      loop: "{{ FABRICS }}"

    # - debug:
    #     msg: "{{ cli_result.results[idx].stdout }}"
    #   loop: "{{ FABRICS }}"
    #   loop_control:
    #     index_var: idx
    #   when:
    #     - ansible_verbosity > 0

    - local_action:
        module: set_fact
        filename: "{{ inventory_hostname }}_{{ role_name|basename }}_{{ date }}.txt"
        cli_output: |-
          {% for item in cli_result.results %}
          {{ item.stdout }}
          {% endfor %}

    - name: Save command output
      local_action:
        module: copy
        content: "{{ cli_output }}"
        dest: "{{ LOG_DIR }}/{{ filename }}"

    - local_action:
        module: set_fact
        cli_parsed: "{{ cli_output | parse_cli_textfsm(TEXTFSM) | split_by_node }}"

  vars:
    date: "{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}"
  when:
    - not DEBUG


-
  block: ### DEBUG ONLY
  - local_action:
      module: set_fact
      cli_output: "{{ lookup('file', log_file) }}"

  - local_action:
      module: set_fact
      cli_parsed: "{{ cli_output | parse_cli_textfsm(TEXTFSM) | split_by_node }}"

  - local_action:
      module: set_fact
      filename: "{{ log_file|basename }}"

  vars:
    search_path: "{{ LOG_DIR }}/{{ inventory_hostname }}_{{ role_name|basename }}_*.txt"
    log_files: "{{ lookup('fileglob', search_path).split(',') }}"
    log_file: "{{ log_files[0] if log_files }}"
  when:
    - DEBUG


- name: save result
  local_action:
    module: template
    src: "{{ INT_STATUS_HTML }}"
    dest: "{{ LOG_DIR }}/{{ filename }}.html"
  changed_when: false
  ignore_errors: true
